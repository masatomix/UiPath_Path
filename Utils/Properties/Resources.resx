<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Description4_PathUtils_DirectoryName" xml:space="preserve">
    <value>Returns the same as Path.GetDirectoryName().If an existing directory is specified, even if there is no "\" at the end, the directory path is returned.</value>
  </data>
  <data name="Description4_PathUtils_DirExists" xml:space="preserve">
    <value>Returns true if the specified Directory exists (returns false even if it exists if it is a File).</value>
  </data>
  <data name="Description4_PathUtils_FileExists" xml:space="preserve">
    <value>Returns true if the specified File exists (returns false even if it exists if it is a Directory).</value>
  </data>
  <data name="Description4_PathUtils_FullPath" xml:space="preserve">
    <value>Returns full Path.</value>
  </data>
  <data name="Description4_PathUtils_Path" xml:space="preserve">
    <value>Enter the file path as a string.</value>
  </data>
  <data name="CombineDesigner_Label" xml:space="preserve">
    <value>Path Array</value>
  </data>
  <data name="Description4_Base64Decode_Target" xml:space="preserve">
    <value>Specify the String to be decoded.</value>
  </data>
  <data name="Description4_Base64EncodeFromFile_Path" xml:space="preserve">
    <value>Specify the file path of the file to be  encoded.</value>
  </data>
  <data name="Description4_Base64Encode_Target" xml:space="preserve">
    <value>Specify the String to be encoded.</value>
  </data>
  <data name="Description4_ConvertCRLF_Target" xml:space="preserve">
    <value>Specify the String to be converted.</value>
  </data>
  <data name="Category5_ConvertCRLF_CRLF" xml:space="preserve">
    <value>Line feed code to be set</value>
  </data>
  <data name="Category1_PathUtils" xml:space="preserve">
    <value>Utils.Path Utilities</value>
  </data>
  <data name="Category1_StringUtils" xml:space="preserve">
    <value>Utils.String Utilities</value>
  </data>
  <data name="Description3_Combine" xml:space="preserve">
    <value>Combines an array of strings into a path.</value>
  </data>
  <data name="Description4_Combine_PathArray" xml:space="preserve">
    <value>An array of parts of the path.</value>
  </data>
  <data name="Description3_CurrentDir" xml:space="preserve">
    <value>Gets the current working directory. only calls Directory.GetCurrentDirectory method.</value>
  </data>
  <data name="Description4_CurrentDir_FullPath" xml:space="preserve">
    <value>Returns  the current working directory</value>
  </data>
  <data name="Description3_PathUtils" xml:space="preserve">
    <value>Returns the absolute path for the specified path string ,checks the existence of the file ,etc.</value>
  </data>
  <data name="DisplayName2_Combine" xml:space="preserve">
    <value>Combine</value>
  </data>
  <data name="DisplayName2_CurrentDir" xml:space="preserve">
    <value>Current Dir</value>
  </data>
  <data name="DisplayName2_PathUtils" xml:space="preserve">
    <value>Path Utils</value>
  </data>
  <data name="Description3_Base64Decode" xml:space="preserve">
    <value>Converts the specified string, which encodes binary data as base-64 digits.</value>
  </data>
  <data name="Description3_Base64Encode" xml:space="preserve">
    <value>Converts a String to its equivalent string representation that is encoded with base-64 digits.</value>
  </data>
  <data name="Description3_Base64EncodeFromFile" xml:space="preserve">
    <value>Converts a String to its equivalent string representation that is encoded with base-64 digits.</value>
  </data>
  <data name="Description3_ConvertCRLF" xml:space="preserve">
    <value>Convert the line feed code of the given text.</value>
  </data>
  <data name="Description3_ToJSONString" xml:space="preserve">
    <value>An activity that converts arbitrary objects to JSON strings.</value>
  </data>
  <data name="DisplayName2_Base64Decode" xml:space="preserve">
    <value>Base64 Decode</value>
  </data>
  <data name="DisplayName2_Base64Encode" xml:space="preserve">
    <value>Base64 Encode</value>
  </data>
  <data name="DisplayName2_Base64EncodeFromFile" xml:space="preserve">
    <value>Base64 Encode From File</value>
  </data>
  <data name="DisplayName2_ConvertCRLF" xml:space="preserve">
    <value>Convert CR/LF</value>
  </data>
  <data name="DisplayName2_ToJSONString" xml:space="preserve">
    <value>To JSON String</value>
  </data>
  <data name="DisplayName6_PathUtils_DirectoryName" xml:space="preserve">
    <value>DirectoryPath</value>
  </data>
</root>