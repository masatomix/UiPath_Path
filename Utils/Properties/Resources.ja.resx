<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Description4_Combine_PathArray" xml:space="preserve">
    <value>stringの配列で、連結したいファイルパスを記述します。</value>
  </data>
  <data name="Description4_PathUtils_DirectoryName" xml:space="preserve">
    <value>Directoryのフルパスが返ります。原則 Path.GetDirectoryName() とおなじものを返しますが存在するディレクトリを指定したときは末尾に\がなくても、そのディレクトリパスを返します。Path.GetDirectoryName()はその上のディレクトリパスを返してしまうようで。。</value>
  </data>
  <data name="Description4_PathUtils_DirExists" xml:space="preserve">
    <value>指定したディレクトリが存在すればTrue(ファイルだったら存在してもFalse)</value>
  </data>
  <data name="Description4_PathUtils_FileExists" xml:space="preserve">
    <value>指定したファイルが存在すればTrue(ディレクトリだったら存在してもFalse)</value>
  </data>
  <data name="Description4_PathUtils_FullPath" xml:space="preserve">
    <value>フルパスが返ります</value>
  </data>
  <data name="Description4_PathUtils_Path" xml:space="preserve">
    <value>処理したいファイルパスを記述します。</value>
  </data>
  <data name="CombineDesigner_Label" xml:space="preserve">
    <value>Pathの配列</value>
  </data>
  <data name="Description4_CurrentDir_FullPath" xml:space="preserve">
    <value>現在のディレクトリがフルパスで返ります</value>
  </data>
  <data name="Description4_Base64Decode_Target" xml:space="preserve">
    <value>処理したい文字データを指定します</value>
  </data>
  <data name="Description4_Base64EncodeFromFile_Path" xml:space="preserve">
    <value>処理したいファイルのファイルパスを指定します</value>
  </data>
  <data name="Description4_Base64Encode_Target" xml:space="preserve">
    <value>処理したい文字データを指定します</value>
  </data>
  <data name="Description4_ConvertCRLF_Target" xml:space="preserve">
    <value>処理したい文字データを指定します</value>
  </data>
  <data name="Category5_ConvertCRLF_CRLF" xml:space="preserve">
    <value>セットする改行コード</value>
  </data>
  <data name="Description3_Base64Decode" xml:space="preserve">
    <value>Base64 Encodeされた文字列をDecodeし、UTF-8で文字列にします。</value>
  </data>
  <data name="Description3_Base64Encode" xml:space="preserve">
    <value>文字列をUTF-8とみなしBase64 Encodeします。</value>
  </data>
  <data name="Description3_Base64EncodeFromFile" xml:space="preserve">
    <value>ファイルをバイナリで読取り、Base64 Encodeします。</value>
  </data>
  <data name="Description3_Combine" xml:space="preserve">
    <value>指定されたパスの配列を連結して、パスを生成します。</value>
  </data>
  <data name="Description3_ConvertCRLF" xml:space="preserve">
    <value>与えられたテキストの改行コードを変換します。</value>
  </data>
  <data name="Description3_CurrentDir" xml:space="preserve">
    <value>現在のディレクトリのフルパスを返すアクティビティです。ただ Directory.GetCurrentDirectory するだけです。</value>
  </data>
  <data name="Description3_PathUtils" xml:space="preserve">
    <value>ファイルの存在チェックなどや、絶対パスなどを返します。</value>
  </data>
  <data name="Description3_ToJSONString" xml:space="preserve">
    <value>任意のオブジェクトをJSON文字列化するアクティビティです。</value>
  </data>
  <data name="DisplayName2_Combine" xml:space="preserve">
    <value>パス連結</value>
  </data>
  <data name="DisplayName2_ConvertCRLF" xml:space="preserve">
    <value>改行コード変換</value>
  </data>
  <data name="DisplayName2_CurrentDir" xml:space="preserve">
    <value>今いるディレクトリ</value>
  </data>
  <data name="DisplayName2_ToJSONString" xml:space="preserve">
    <value>JSONへ変換</value>
  </data>
</root>